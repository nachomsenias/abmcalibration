# Congiguration for Coral Reef Algorithms

# GENERIC PARAMETERS
# ==================================================
# Number of threads for parallel computation
breedthreads	= 1
evalthreads	= 1

# For restoring from unexpected interruptions
checkpoint		= false
checkpoint-prefix	= ec
checkpoint-modulo	= 1

# Type of state for evolution and breeders
state		=  calibration.ecj.Multimodal.NMMSO.NMMSOEvolutionState
#ec.simple.SimpleEvolutionState

breed		= calibration.ecj.Multimodal.NMMSO.NMMSOBreeder
pop		= ec.Population
init		= ec.simple.SimpleInitializer
finish		= ec.simple.SimpleFinisher
eval		= ec.simple.SimpleEvaluator
stat		= ec.simple.SimpleStatistics
exch		= ec.simple.SimpleExchanger

# Seed for the random number generator
seed.0		= 4357


# SPECIFIC PARAMETERS
# ==================================================
breed.velocity-coefficient = 1.0
breed.personal-coefficient = 2.0
breed.informant-coefficient = 2.0
#Tolerance value to measure distance between sub-swarms [similar to niche radius]
breed.tol = 0.01
#Sub-swarm limit to the number of individuals. NOTE: n is multiplied by the problem dimension
breed.n = 10
#maximum number of sub-swarms to increment
breed.max_inc = 100

# Population
pop.subpops		= 1
pop.subpop.0		=   ec.Subpopulation
pop.subpop.0.size 		= 10000
pop.subpop.0.duplicate-retries 	= 2
 
# Type of data
pop.subpop.0.species 		= ec.vector.FloatVectorSpecies
pop.subpop.0.species.ind	= calibration.ecj.Multimodal.NMMSO.NMMSOParticle
pop.subpop.0.species.min-gene	= 0
pop.subpop.0.species.max-gene 	= 500
pop.subpop.0.species.fitness 	= ec.simple.SimpleFitness


# Stopping criteria
#generations		= 10
evaluations		= 10000
quit-on-run-complete	= true


# Dummy Crossover operator
pop.subpop.0.species.crossover-type	= one
 
# Dummy Mutation operator
pop.subpop.0.species.mutation-type	= gauss
pop.subpop.0.species.mutation-prob	= 0.1
pop.subpop.0.species.mutation-stdev = 0.05
pop.subpop.0.species.duplicate-retries = 5
pop.subpop.0.species.mutation-bounded = false

# Dummy Breeding scheme
pop.subpop.0.species.pipe			= ec.vector.breed.VectorMutationPipeline
pop.subpop.0.species.likelihood			= 0.2 
pop.subpop.0.species.pipe.source.0.source.0	= ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.0.size= 2
pop.subpop.0.species.pipe.source.0		= ec.select.FirstSelection
pop.subpop.0.species.pipe.source.0.source.1	= same

# Evaluation function
eval.problem		= EcjModelEvaluation


# LOG INFO
# ==================================================
# Standard ecj statistics
stat.file		= $out.stat
stat.child.0.activate  = true
stat.child.0.generations  = 5
stat.num-children = 4

# Custom statistics for using the initial model as solution
stat.child.0 = EcjInitialSolution

# Custom statistics for having snapshots
stat.child.1 = EcjStatisticsSnapshot
stat.child.1.activate = true
stat.child.1.generations = 10

# Custom statistics for having evolution data
stat.child.2 = EcjStatisticsPopulation
stat.child.2.activate	= true
stat.child.2.generations	= 1

# Custom statistic for clearing niches
stat.child.3 =calibration.ecj.statistics.EcjStatisticsMMPopulation
stat.child.3.do-final = true
stat.child.3.radius=0.06
stat.child.3.niches=1



